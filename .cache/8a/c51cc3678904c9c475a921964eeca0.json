{"id":"../../node_modules/a_mock/and/newBinaryAnd.js","dependencies":[{"name":"C:\\Users\\AJ Technology\\Downloads\\Natours\\package.json","includedInParent":true,"mtime":1656481648663},{"name":"C:\\Users\\AJ Technology\\Downloads\\Natours\\node_modules\\a_mock\\package.json","includedInParent":true,"mtime":1656481490998},{"name":"./newBinaryAnd","loc":{"line":2,"column":28,"index":66},"parent":"C:\\Users\\AJ Technology\\Downloads\\Natours\\node_modules\\a_mock\\and\\newBinaryAnd.js","resolved":"C:\\Users\\AJ Technology\\Downloads\\Natours\\node_modules\\a_mock\\and\\newBinaryAnd.js"}],"generated":{"js":"function _new(predicate,predicate2) {\n\tvar newBinaryAnd = require('./newBinaryAnd');\n\n\tfunction binaryAnd() {\n\t\treturn predicate.apply(null,arguments) && predicate2.apply(null,arguments);\n\t}\n\n\tbinaryAnd.add = function() {\n\t\tvar currentPredicate = binaryAnd;\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar predicate = arguments[i];\n\t\t\tcurrentPredicate = newBinaryAnd(currentPredicate,predicate);\n\t\t};\n\t\treturn currentPredicate;\n\t};\n\n\treturn binaryAnd;\n}\n\nmodule.exports = _new;"},"sourceMaps":{"js":{"mappings":[{"source":"../../node_modules/a_mock/and/newBinaryAnd.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/a_mock/and/newBinaryAnd.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/a_mock/and/newBinaryAnd.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/a_mock/and/newBinaryAnd.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/a_mock/and/newBinaryAnd.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/a_mock/and/newBinaryAnd.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/a_mock/and/newBinaryAnd.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/a_mock/and/newBinaryAnd.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/a_mock/and/newBinaryAnd.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/a_mock/and/newBinaryAnd.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/a_mock/and/newBinaryAnd.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/a_mock/and/newBinaryAnd.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/a_mock/and/newBinaryAnd.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/a_mock/and/newBinaryAnd.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/a_mock/and/newBinaryAnd.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/a_mock/and/newBinaryAnd.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/a_mock/and/newBinaryAnd.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/a_mock/and/newBinaryAnd.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/a_mock/and/newBinaryAnd.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/a_mock/and/newBinaryAnd.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}}],"sources":{"../../node_modules/a_mock/and/newBinaryAnd.js":"function _new(predicate,predicate2) {\n\tvar newBinaryAnd = require('./newBinaryAnd');\n\n\tfunction binaryAnd() {\n\t\treturn predicate.apply(null,arguments) && predicate2.apply(null,arguments);\n\t}\n\n\tbinaryAnd.add = function() {\n\t\tvar currentPredicate = binaryAnd;\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar predicate = arguments[i];\n\t\t\tcurrentPredicate = newBinaryAnd(currentPredicate,predicate);\n\t\t};\n\t\treturn currentPredicate;\n\t};\n\n\treturn binaryAnd;\n}\n\nmodule.exports = _new;"},"lineCount":20}},"error":null,"hash":"e53cceb87e794670b8d64f8a5c127bdd","cacheData":{"env":{}}}